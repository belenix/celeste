<?xml version="1.0" ?>
<!--
Copyright 2007-2009 Sun Microsystems, Inc. All Rights Reserved.
DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER

This code is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License version 2
only, as published by the Free Software Foundation.

This code is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License version 2 for more details (a copy is
included in the LICENSE file that accompanied this code).

You should have received a copy of the GNU General Public License
version 2 along with this work; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
02110-1301 USA

Please contact Sun Microsystems, Inc., 16 Network Circle, Menlo
Park, CA 94025 or visit www.sun.com if you need additional
information or have any questions.
-->
<project name="Celeste" default="jars" basedir="." >
        <description>Build the Celeste project</description>

    <!-- Load up user properties first;  these can be used
         to override any of the properties below  -->
    <property name="user.properties.file" location="${user.home}/.build.properties" />
    <property file="${user.properties.file}" />

    <property name="lib.dir" location="lib" />
    <property name="src.dir" location="src" />
    <property name="src.etc.dir" location="src/etc" />
    <property name="test.dir" location="test" />
    <property name="test.unit.dir" location="${test.dir}/unit" />
    <property name="test.showoutput" value="false"/>
    <property name="doc.dir" location="doc" />
    <property name="build.dir" location="${basedir}/build" />
    <property name="WebContent.dir" location="${src.dir}/WEB-INF" />
    <property name="build.classes.dir" location="${build.dir}/classes" />

    <property name="javadoc.dir" location="${basedir}/web/javadoc" />
    <property name="dist.dir" location="${basedir}/dist" />

    <property name="build.test.dir"         location="${build.dir}/test" />
    <property name="build.test.classes.dir" location="${build.test.dir}/classes" />
    <property name="build.test.depend.dir"  location="${build.test.dir}/depend" />
    <property name="build.test.output.dir"  location="${build.test.dir}/output" />

    <property name="j2se.doc.api.url" value="http://java.sun.com/javase/6/docs/api/" />
    <property name="jdk.package.list" value="${doc.dir}/jdk5.0_package_list" />

	<property name="Phidoux.jar" value="Phidoux.jar" />	
	
    <!-- Override this property to limit your unit tests run -->
    <property name="test.include" value="**/*Test.java" />

    <!-- Override this property to point to your junit jar file -->
    <property name="junit.jar" location="${lib.dir}/junit-4.1.jar"/>

    <!-- properties used by javac -->
    <property name="build.debug" value="yes" />
    <property name="build.debug.level" value="lines,vars,source" />
    <property name="build.deprecation" value="no" />

    <!-- properties used by manifests for jar files -->
    <property name="manifest.vendor" value="Sun Microsystems, Inc." />
    <property name="manifest.celeste.spec.version" value="0.1" />

    <!--target name="classdepandjar.jar">
      <exec executable="/usr/bin/curl" >
        <arg value="-k" />
        <arg value="-o" />
        <arg value="lib/classdepandjar.jar" />
        <arg value="https://classdepandjar.dev.java.net/downloads/classdepandjar.jar" />
      </exec>
      <echo message="${os.name}" />
    </target>

    <taskdef name="classdepandjar"
             classname="org.jini.rio.tools.ant.ClassDepAndJarTask" >
        <classpath location="${lib.dir}/classdepandjar.jar" />
    </taskdef-->

    <!-- =================================
          target: init
         ================================= -->
    <target name="init">
        <!-- Create the initial time stamps, we use DSTAMP -->
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <!-- Read the contents of copyright-mini.html into a property,
             for javadoc commands -->
        <loadfile property="copyright.mini" srcFile="${doc.dir}/copyright-mini.html" />
    </target>

    <!-- =================================
          target: jars
         ================================= -->
    <target name="jars" depends="beehive, celeste, sortgen, wordcount, Phidoux.jar"
        description="==> builds all jar files"/>

    <!-- =================================
          target: all
         ================================= -->
    <target name="all" depends="jars, doc"
        description="==> builds everything, including javadocs"/>

    <!-- =================================
          target: compile
         ================================= -->
    <target name="compile" depends="init, Phidoux.jar" description="==> compile all sources">
        <mkdir dir="${build.classes.dir}"/>
        <depend srcdir="${src.dir}"
                destdir="${build.classes.dir}"
                cache="${build.dir}/dependencies"
                closure="true" />
        <javac srcdir="${src.dir}"
               destdir="${build.classes.dir}"
               includeAntRuntime="no"
               debug="${build.debug}"
               debuglevel="${build.debug.level}"
               source="1.6"
               deprecation="${build.deprecation}"
        	   classpath="${dist.dir}/${Phidoux.jar}">
            <include name="sunlabs/**/*.java" />
            <include name="sunlabsx/**/*.java" />
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>


    <!-- =================================
          target: beehive
         ================================= -->
    <target name="beehive" depends="compile,scmversion" description="==> build Beehive">
        <mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/beehive.jar" filesonly="true" 
             >
            <fileset dir="${build.classes.dir}" includes="sunlabs/beehive/** sunlabs/asdf/io/** sunlabs/asdf/jmx/** sunlabs/asdf/util/**  sunlabs/asdf/functional/**" />
            <fileset dir="" includes="web/**" />
            <manifest>
                <attribute name="Main-Class" value="sunlabs.beehive.node.Beehive" />
                <attribute name="Class-Path" value="${Phidoux.jar}" />
                <attribute name="Built-By" value="${user.name}.${DSTAMP}" />
                <attribute name="Sealed" value="true" />
                <attribute name="Specification-Title" value="Sun Labs Beehive" />
                <attribute name="Specification-Version" value="2010.5.10" />
                <attribute name="Specification-Vendor" value="${manifest.vendor}" />
                <attribute name="Implementation-Title" value="sunlabs.beehive" />
                <attribute name="Implementation-Version" value="${scm_version}" />
                <attribute name="Implementation-Vendor" value="${manifest.vendor}" />
            </manifest>
        </jar>
    </target>


    <!-- =================================
          target: celeste
         ================================= -->
    <target name="celeste" depends="compile,scmversion"
            description="==> build Celeste Application">
        <mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/celeste.jar" filesonly="true">
            <fileset dir="${build.classes.dir}" includes="sunlabs/celeste/**" />
            <fileset dir=""                     includes="web/**" />
            <manifest>
                <attribute name="Main-Class"             value="sunlabs.celeste.node.Celeste" />
                <attribute name="Class-Path"             value="beehive.jar ${Phidoux.jar}" />
                <attribute name="Built-By"               value="${user.name}.${DSTAMP}" />
                <attribute name="Sealed"                 value="true" />
                <attribute name="Specification-Title"    value="Sun Labs Celeste" />
                <attribute name="Specification-Version"  value="${manifest.celeste.spec.version}" />
                <attribute name="Specification-Vendor"   value="${manifest.vendor}" />
                <attribute name="Implementation-Title"   value="sunlabs.celeste" />
                <attribute name="Implementation-Version" value="${scm_version}" />
                <attribute name="Implementation-Vendor"  value="${manifest.vendor}" />
            </manifest>
        </jar>
    </target>

    <target name="sortgen" depends="compile,scmversion" description="==> build sortable data generator">
        <mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/sortgen.jar" filesonly="true" >
             <fileset dir="${build.classes.dir}" includes="sunlabs/celeste/client/application/SortGen.class" />
            <manifest>
                <attribute name="Main-Class"             value="sunlabs.celeste.client.application.SortGen" />
                <attribute name="Built-By"               value="${user.name}.${DSTAMP}" />
                <attribute name="Sealed"                 value="true" />
                <attribute name="Specification-Title"    value="Sun Labs Celeste" />
                <attribute name="Specification-Version"  value="${manifest.celeste.spec.version}" />
                <attribute name="Specification-Vendor"   value="${manifest.vendor}" />
                <attribute name="Implementation-Title"   value="sunlabs.celeste" />
                <attribute name="Implementation-Version" value="${scm_version}" />
                <attribute name="Implementation-Vendor"  value="${manifest.vendor}" />
            </manifest>
         </jar>
    </target>

    <target name="wordcount" depends="compile,scmversion"
            description="==> build the wordcount extension">
        <mkdir dir="${dist.dir}" />
        <jar destfile="${dist.dir}/wordcount.jar" filesonly="true" >
            <fileset dir="${build.classes.dir}" includes="sunlabs/celeste/extension/WordCount*.class" />
            <manifest>
                <attribute name="Main-Class"             value="sunlabs.celeste.extension.WordCount" />
                <attribute name="Built-By"               value="${user.name}.${DSTAMP}" />
                <attribute name="Sealed"                 value="true" />
                <attribute name="Specification-Title"    value="Sun Labs Celeste" />
                <attribute name="Specification-Version"  value="${manifest.celeste.spec.version}" />
                <attribute name="Specification-Vendor"   value="${manifest.vendor}" />
                <attribute name="Implementation-Title"   value="sunlabs.celeste" />
                <attribute name="Implementation-Version" value="${scm_version}" />
                <attribute name="Implementation-Vendor"  value="${manifest.vendor}" />
            </manifest>
         </jar>
    </target>


    <!-- =================================
         target: Phidoux.jar
         ================================= -->
    <target name="Phidoux.jar"
            description="==> get the Phidoux.jar file">
        <mkdir dir="${dist.dir}" />
    	<copy file="Phidoux/Phidoux.jar" toDir="${dist.dir}" />
    </target>


    <!-- =================================
          target: test-compile
         ================================= -->
    <target name="test-compile" depends="init"
            description="==> build test files">
        <mkdir dir="${build.test.classes.dir}" />
        <depend srcdir="${test.unit.dir}"
                destdir="${build.test.classes.dir}"
                cache="${build.test.depend.dir}"
                closure="true" />
        <javac srcdir="${test.unit.dir}"
               destdir="${build.test.classes.dir}"
               includeAntRuntime="no"
               debug="${build.debug}"
               debuglevel="${build.debug.level}"
               deprecation="${build.deprecation}"
               source="1.6" >
            <classpath>
                <pathelement location="${build.classes.dir}" />
                <pathelement location="${junit.jar}" />
            </classpath>
            <include name="**/*.java" />
            <compilerarg value="-Xlint:unchecked"/>
        </javac>
    </target>

    <!-- =================================
          target: test
         ================================= -->
    <target name="test" depends="compile, test-compile"
            description="==> run junit tests">
        <mkdir dir="${build.test.dir}" />
        <delete dir="${build.test.output.dir}" />
        <mkdir dir="${build.test.output.dir}" />
        <junit fork="true"
               printsummary="on"
               showoutput="${test.showoutput}"
               tempdir="${build.test.dir}"
               failureproperty="tests.failed">
            <classpath>
                <pathelement location="${build.test.classes.dir}" />
                <pathelement location="${build.classes.dir}" />
                <pathelement location="${junit.jar}" />
            </classpath>
            <jvmarg value="-enableassertions"/>
            <formatter type="plain" />
            <batchtest todir="${build.test.output.dir}" >
                <fileset dir="${test.unit.dir}" >
                    <include name="${test.include}" />
                </fileset>
            </batchtest>
        </junit>
        <fail if="tests.failed" message="Some tests failed"/>
    </target>


    <!-- =================================
          target: checkdocuptodate

         Determine whether or not the javadoc tree is up to date.  The check
         depends on the doc target updating a timestamp file when it
         completes successfully.
         ================================= -->
    <target name="checkdocuptodate" >
        <uptodate property="javadoc.isuptodate">
            <srcfiles dir="${src.dir}">
                <include name="**/*.java"/>
                <include name="**/package.html"/>
            </srcfiles>
            <srcfiles dir="${doc.dir}">
                <include name="doc-files/**"/>
            </srcfiles>
            <mapper type="merge" to="${javadoc.dir}/doctimestamp"/>
        </uptodate>
    </target>

    <!-- =================================
          target: doc
         ================================= -->
    <target name="doc" depends="init, checkdocuptodate, proxy.args" unless="javadoc.isuptodate" description="==> build javadocs">
        <delete dir="${javadoc.dir}" />
        <mkdir dir="${javadoc.dir}" />
        <mkdir dir="${javadoc.dir}/doc-files" />
        <copy todir="${javadoc.dir}/doc-files" >
                <fileset dir="${doc.dir}/doc-files" />
        </copy>
        <javadoc destdir="${javadoc.dir}"
                 overview="${src.dir}/overview.html"
                 use="true"
                 package="true"
                 linksource="yes"
                 noqualifier="java.*"
                 classpath="${WebServer.jar}">
            <arg line="${option.proxyHost}" />
            <arg line="${option.proxyPort}" />
            <arg line="${option.nonProxyHosts}" />
            <arg value="-quiet" />
            <arg value="-docfilessubdirs" />
            <bottom>
                <![CDATA[<div class="bottom">${scm_version}</div><div class="bottom">${copyright.mini}<a href="{@docRoot}/doc-files/copyright.html">Terms</a>.</div>]]>
            </bottom>
            <fileset dir="${src.dir}" defaultexcludes="yes">
                <include name="sunlabs/**/*.java"/>
                <include name="sunlabsx/**/*.java"/>
            </fileset>
            <link href="${j2se.doc.api.url}" offline="false" packagelistLoc="${jdk.package.list}" />
        </javadoc>
        <touch file="${javadoc.dir}/doctimestamp" />
    </target>

    <!-- =================================
          target: findbugs

          N.B. Commented out.  After installing findbugs (and patching up
               the version number as needed), feel free to restore.
         ================================= -->
    <!--
    <property name="findbugs.home" value="${lib.dir}/findbugs-1.3.4" />
    <taskdef name="findbugs"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask" >
        <classpath location="${findbugs.home}/lib/findbugs-ant.jar" />
    </taskdef>
    <target name="findbugs" depends="celeste"
            description="==> run findbugs on celeste.jar">
        <echo message="This could take several minutes." />
        <findbugs home="${findbugs.home}"
                  jvmargs="-Xmx384m"
                  effort="max"
                  reportLevel="low"
                  output="xml"
                  outputFile="${build.dir}/celeste-fb.xml" >
            <sourcePath path="${src.dir}" />
            <class location="${dist.dir}/celeste.jar" />
        </findbugs>
        <echo message="To view analysis, open the GUI program ${findbugs.home}/bin/findbugs and choose File->Load Analysis.  Select ${build.dir}/celeste-fb.xml." />
    </target>
    -->

    <!-- =================================
          target: dist
         ================================= -->
    <target name="dist" depends="binary-dist"
            description="==> build tar file for distribution">
    </target>

    <!-- =================================
          target: binary-dist
         ================================= -->
    <target name="binary-dist" depends="jars, doc"
            description="==> build tar file for a binary distribution">
        <jar destfile="${dist.dir}/docs.jar" filesonly="true" >
            <fileset dir="${javadoc.dir}" />
        </jar>
        <tar destfile="${dist.dir}/${DSTAMP}-binary.tgz"
             defaultexcludes="yes"
             compression="gzip" >
            <tarfileset dir="." filemode="755" includes="bin/**" />
            <tarfileset dir="." filemode="644" includes="QUICKSTART languages/** dist/*.jar"
                    excludes="languages/bash/** languages/python/*py" />
            <tarfileset dir="." filemode="755" includes="languages/bash/**" />
            <tarfileset dir="." filemode="755" includes="languages/python/*py" />
            <tarfileset dir="." filemode="755" includes="administration/**" />
            <tarfileset dir="." filemode="600"
                includes="etc/jmxremote.password.template \
                        etc/celeste.cf etc/celeste-httpd.cf \
                        etc/logging.properties" />
            <tarfileset dir="." filemode="600" includes="admin/multi-installer admin/multi-celeste" />
            <tarfileset dir="svc" filemode="555"
                includes="celeste-exec-start"
                fullpath="dist/celeste-exec-start" />
            <tarfileset dir="svc" filemode="444" includes="sunlabs-celeste.xml" fullpath="var/svc/manifest/sunlabs-celeste.xml" />
        </tar>
    </target>

    <!-- =================================
          target: clean
         ================================= -->
    <target name="clean"  description="==> Remove all build artifacts">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
    </target>


    <!-- =================================
          target: clobber
         ================================= -->
    <target name="clobber" depends="clean"
            description="==> Remove all build artifacts, including javadoc">
        <delete dir="${javadoc.dir}" />
    </target>

    <!-- =================================
          Targets that set properties concerning proxy setup that are
          to be used as arguments in javadoc tasks.  They come in
          pairs, one for the case where the underlying Java property is
          set and one for where it isn't set.  (The proxy settings are
          necessary to allow the "-link" option to work across
          firewalls.  If you need them and they're not set by default,
          you can set them in your ~/.build.properties file.)
         ================================= -->
    <target name="proxy.args"
            depends="proxyHost.arg, proxyPort.arg, nonProxyHosts.arg" />

    <target name="proxyHost.arg"
            depends="set.proxyHost.arg, unset.proxyHost.arg" />
    <target name="set.proxyHost.arg" if="http.proxyHost" >
        <property name="option.proxyHost"
                value="-J-Dhttp.proxyHost=${http.proxyHost}" />
    </target>
    <target name="unset.proxyHost.arg" unless="http.proxyHost" >
        <property name="option.proxyHost" value="" />
    </target>

    <target name="proxyPort.arg"
            depends="set.proxyPort.arg, unset.proxyPort.arg" />
    <target name="set.proxyPort.arg" if="http.proxyPort" >
        <property name="option.proxyPort"
                value="-J-Dhttp.proxyPort=${http.proxyPort}" />
    </target>
    <target name="unset.proxyPort.arg" unless="http.proxyPort" >
        <property name="option.proxyPort" value="" />
    </target>

    <target name="nonProxyHosts.arg"
            depends="set.nonProxyHosts.arg, unset.nonProxyHosts.arg" />
    <target name="set.nonProxyHosts.arg" if="http.nonProxyHosts" >
        <property name="option.nonProxyHosts"
                value="-J-Dhttp.nonProxyHosts=${http.nonProxyHosts}" />
    </target>
    <target name="unset.nonProxyHosts.arg" unless="http.nonProxyHosts" >
        <property name="option.nonProxyHosts" value="" />
    </target>

    <target name="scmversion">
        <exec executable="hg" outputproperty="scm_version" failifexecutionfails="false" error="/dev/null">
            <!-- arg line="id"/ -->
                <!-- arg line="log -rtip - -template 'date: {date|isodate}'"/ -->
                <arg line="log -rtip --template 'Revision: {branches}{rev} of {date|isodate}. Built {localdate|isodate}'"/>
        </exec>
    </target>
</project>
