#!/bin/bash -
#
#* Copyright 2007-2010 Oracle. All Rights Reserved.
#* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
#*
#* This code is free software; you can redistribute it and/or modify
#* it under the terms of the GNU General Public License version 2
#* only, as published by the Free Software Foundation.
#*
#* This code is distributed in the hope that it will be useful, but
#* WITHOUT ANY WARRANTY; without even the implied warranty of
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#* General Public License version 2 for more details (a copy is
#* included in the LICENSE file that accompanied this code).
#*
#* You should have received a copy of the GNU General Public License
#* version 2 along with this work; if not, write to the Free Software
#* Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
#* 02110-1301 USA
#*
#* Please contact Oracle Corporation, 500 Oracle Parkway, Redwood Shores, CA 94065
#* or visit www.oracle.com if you need additional information or
#* have any questions.


TITANHOME=${TITANHOME:="unset"}
if [[ ${TITANHOME} == "unset" ]]; then
    if [[ -x ./bin/titan && -e ./lib/titan.jar ]]; then
	echo "NOTICE: The current directory looks like a TITAN runtime installation."
	echo "        Using the current directory instead of /opt/titan"
	echo "        Explicitly set the environment variable TITANHOME to override this."
	TITANHOME=`pwd`
    else
	TITANHOME="/opt/titan"
    fi
fi

#
# Report the process ids of JVMs that are running Celeste nodes.
#
getpids() {
    case $(uname -s) in
        SunOS)
            #
            # Look for processes with argument lists matching what we've
            # launched.
            #
            # XXX:  pgrep considers only the first 80 bytes of the command line
            #       so this test is vulnerable to false positives.  In
            #       particular, the string "celeste.jar" doesn't appear within
            #       the 80 byte window.  Sigh...
            #
            pidlist=$(pgrep -f 'java.*-Djava.util.logging.config.file')
            echo $pidlist
            ;;

        #
        # The following code is known to work on Darwin, and has a good shot
        # at working on other systems.
        #
        *)
            pidlist=$(/bin/ps axww | grep Dtitan-node | grep -v grep | awk '{print $1}')
            echo $pidlist
            ;;
    esac
}

#
# Set the value of the "config_key" shell variable used to determine which
# configuration to use.
#
TITANCONFIG_URL=${TITANCONFIG_URL:="unset"}
if [[ ${TITANCONFIG_URL} == "unset" ]]; then
	config_key=${TITANCONFIG:=`hostname`}
fi

#
# Establish defaults for variables documented as being settable in
# etc/celeste.cf.  Note that default values are documented there, so a change
# here must have a corresponding documentation change there.
#

spool_root="/tmp/titan"
logging_config_file="${TITANHOME}/etc/logging.properties"
logfile="/tmp/titan-${TITANCONFIG}"

JAVA=${JAVA:=/usr/bin/java}

# Every variable value defined and set above can be overridden in the
# configuration file below.

# Suck in the configuration file.
. ${TITANHOME}/etc/titan.cf

#
# DOJO Configuration
#
#
DOJOBASE="-Dsunlabs.asdf.xhtml.ajax.dojo.rootURL=http://o.aolcdn.com/dojo/1.4.1"
DOJO="-Dsunlabs.asdf.xhtml.ajax.dojo.dojoJs=dojo/dojo.xd.js"
DOJOOPTS="${DOJOBASE} ${DOJO}"

start() {
	echo ${JAVA} -Dtitan-node ${supervisor_vm_options} -jar ${TITANHOME}/lib/titan.jar  ${supervisor_options} -V="${node_vm_options}" ${node_options} '>' ${logfile} '2>&1' 
	${JAVA} -Dtitan-node ${supervisor_vm_options} -jar ${TITANHOME}/lib/titan.jar  ${supervisor_options} -V="${node_vm_options}" ${node_options} > ${logfile} 2>&1  &
}

stop() {
    pidlist=$(getpids)
    echo Stopping Titan ${TITANCONFIG}: ${pidlist}
    if [[ -n "$pidlist" ]]; then
        kill -9 $(getpids)
    fi
}

restart() {
	stop
	start
}

reinit() {
	stop
	rm -rf ${spool_root}/dolr*
}

clean() {
	stop
	for node in ${spool_root}/node-* ; do
		rm -rf $node/publishers $node/object-store/ $node/object-publishers > /dev/null 2>&1
        	mkdir $node/publishers $node/object-store > /dev/null 2>&1
		find $node -name '*.txt' -exec rm -f \{\} \; > /dev/null 2>&1
		find $node -name '*.lck' -exec rm -f \{\} \; > /dev/null 2>&1
	done
}

clobber() {
	stop
	echo /bin/rm -rf ${spool_root}
	/bin/rm -rf ${spool_root}
}

bgclobber() {
        stop
        echo "/bin/mv -f ${spool_root} ${spool_root}$$ ; /bin/rm -rf ${spool_root}$$ "
        /bin/mv -f ${spool_root} ${spool_root}$$ ; /bin/rm -rf ${spool_root}$$ &
}

config() {
	echo ${JAVA} 
	echo ${supervisor_vm_options}
	echo ${supervisor_options} 
	echo "${node_vm_options}"
	echo ${node_options}
}

status() {
    pidlist=$(getpids)
    if [[ -z "$pidlist" ]]; then
        echo "Celeste not running"
    else
        #
        # XXX:  Really ought to discriminate on whether ps is BSD-style
        #       or SysV-style; the use of uname is a surrogate for the proper
        #       test.
        #
        case $(uname -s) in
            SunOS)
                /bin/ps -o pid,time,args -p "$(getpids)"
                ;;
            *)
                /bin/ps $(getpids)
                ;;
        esac
    fi
}

for command in $*; do
	case $command in
		start)
			start
			;;
		stop)
			stop
			;;
		restart)
			restart
			;;
		clean)
			clean
			;;
		clobber)
			clobber
			;;
		bgclobber)
			bgclobber
			;;
		config)
			config
			;;
		reinit)
			reinit
			;;
		status)
			status
			;;
		*|help|-help|--help)
			echo "titan clean"
			echo "        clobber"
			echo "        start"
			echo "        stop"
			echo "        restart"
			echo "        reinit"
			echo "        config"
			echo "        status"
			;;
	esac
done
